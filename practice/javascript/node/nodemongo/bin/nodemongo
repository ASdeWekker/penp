#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../nodemongo")
const debug = require("debug")("sampsite:server")
const http = require("http")

/**
 * Get port from environment and store in Express.
 */

const port = 3002
app.set("port", port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges")
            process.exit(1)
            break
        case "EADDRINUSE":
            console.error(bind + " is already in use")
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
    debug("Listening on " + bind)
}

process.on("SIGINT", () => {
    console.info("SIGINT signal received")

    server.close( (err) => {
        if (err) {
            console.error(err)
            process.exit(1)
        }
    })
})
